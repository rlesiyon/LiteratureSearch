# !pip install -qU langchain langchain-openai langchain-tavily
import fire
from ollama import chat
from ollama import ChatResponse
from .search_pmid import search_pubmed_by_term
import pandas as pd

def summarize_article(abstract):
    """
    Summarize an article abstract into a single, succinct sentence using the 'gemma3:1b' model.

    :param abstract: The text of the article abstract that needs to be summarized.
    :type abstract: str
    :return: A single-sentence summary of the abstract generated by the model.
    :rtype: str

    :example:

    >>> abstract_text = "Recent studies show that climate change affects agricultural productivity..."
    >>> summarize_article(abstract_text)

    :note:
        - Uses the 'chat' API to communicate with the gemma3:1b model.
        - Sends the abstract with instructions to produce a one-sentence summary.
    """
    response: ChatResponse = chat(
        model='gemma3:1b', 
        messages=[
            {
                'role': 'user',
                'content':
                     f"Summarize the following text in exactly one sentence. "
                     f"Do not include any introduction, explanation, or extra textâ€”just the summary.\n\n"
                     f"{abstract}"         
            },
        ]
    ) 
    return response.message.content

def rank_article_as_per_topic(abstract, topic, summarized_text): 
    """
    Rank an article abstract on a scale of 1 to 5 based on its relevance to a given topic using the 'gemma3:1b' model.

    :param abstract: The text of the article abstract to be ranked.
    :type abstract: str
    :param topic: The topic against which the abstract's relevance should be evaluated.
    :type topic: str
    :param topic: 
    :return: A ranking score from 1 to 5 indicating the relevance of the abstract to the topic.
    :rtype: str

    :example:

    >>> abstract_text = "Recent advances in AI have transformed natural language processing."
    >>> topic = "Artificial Intelligence"
    >>> rank_article_as_per_topic(abstract_text, topic)
    '5'

    :note:
        - Uses the 'chat' API to communicate with the gemma3:1b model.
        - The model is instructed to provide a relevance score from 1 (least relevant) to 5 (most relevant).
    """
    response: ChatResponse = chat(
        model='gemma3:1b', 
        messages=[
            {
                'role': 'user',
                'content': 
                    f"Rank the abstract {abstract} and its summarize text {summarized_text} from 1 to 5 based on relevance to {topic} \
                    Only respond with a single number: 1, 2, 3, 4, or 5. \
                    Do not include any text, explanation, or formatting."
            },
        ]
    )
    return response.message.content 

def summarize(topic, output_file="summarize_ranking.csv"):
    '''
    Search PubMed for articles related to a given topic, summarize each article's abstract,
    rank them based on relevance, and export the results to a CSV file.

    :param topic: The topic or search term to query in PubMed.
    :type topic: str
    :param output_file: output file to store the summarization, and article ranking
    :type output_file: str 
    :return: A pandas DataFrame containing the abstract, topic, summary, and relevance ranking for each article.
    :rtype: pandas.DataFrame

    :details:
        This function performs the following steps:
        
        1. Searches PubMed for articles matching the provided topic using ``search_pubmed_by_term``.
        2. Iterates over each retrieved result and:
           - Summarizes the abstract using ``summarize_article``.
           - Ranks the abstract's relevance to the topic using ``rank_article_as_per_topic``.
        3. Compiles all abstracts, summaries, and rankings into a list of dictionaries.
        4. Converts the list into a pandas DataFrame and saves it as ``output.csv`` in the working directory.

    :note:
        - The resulting CSV file includes the following columns: ``abstract``, ``topic``, ``summary``, and ``rank``.
        - This function prints the list of processed results before saving to CSV.

    :example:

    >>> summarize("diabetes insipidus")
    [
        {
            'abstract': 'This study explores the diagnostic differentiation of diabetes insipidus...',
            'topic': 'diabetes insipidus',
            'summary': 'Accurate differentiation of diabetes insipidus subtypes is essential for effective treatment.',
            'rank': '5'
        },
        ...
    ]

    The function also generates a file named ``output.csv`` with the same data.
    '''
    results = search_pubmed_by_term(topic)
    llm_summary_ranking = []
    for result in results:
        summarized_text = summarize_article(result['abstract'])
        rank = rank_article_as_per_topic(result['abstract'], topic, summarized_text)
        llm_summary_ranking.append(
            {
                "abstract" : result['abstract'], 
                "topic" : topic, 
                "summary" : summarized_text, 
                "rank" : rank 
            }
        )

    # save to a csv file
    llm_summary_ranking_df = pd.DataFrame(llm_summary_ranking)
    llm_summary_ranking_df.to_csv(output_file)
    return llm_summary_ranking_df